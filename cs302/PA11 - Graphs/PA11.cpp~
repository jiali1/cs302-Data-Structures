// Program Information ////////////////////////////////////////////////////////
/**
 * @file PA11.cpp
 *
 * @brief Program demonstrates BFS and DFS with graph data
 * 
 * @details Uses three different data managing tools
 *
 * @version 1.00 (15 November 2015)
 *
 * @Note Requires iostream, cstring, SimpleList.cpp, SimpleQueue.cpp,
 *                SimpleStack.cpp, VertexClass.h, and PathClass.h
 */

// Precompiler directives /////////////////////////////////////////////////////

   // None

// Header files ///////////////////////////////////////////////////////////////

#include <iostream>
#include <cstring>
#include "VertexType.h"
#include "PathType.h"
#include "SimpleList.cpp"
#include "SimpleQueue.cpp"
#include "SimpleStack.cpp"

using namespace std;

// Global constant definitioans  //////////////////////////////////////////////

const char DATA_END_CHAR = '#';
const char NULL_CHAR = '\0';
const int MAX_STR_LEN = 80;
const char COLON = ':';
const char TAB = '\t';
const int MAX_VERTICES = 50;

// Free function prototypes  //////////////////////////////////////////////////

bool getALine( istream &consoleIn, char &vert_1, int &wt, char &vert_2 );
bool getLine( istream &consoleIn, char *str, int length, char stopChar );
void dumpList( const SimpleList<VertexType> &list );
void BreadthFirstTraversal( const SimpleList<VertexType> &list );
void DepthFirstTraversal( const SimpleList<VertexType> &list );
bool allAdjacentVertexVisited( const SimpleList<VertexType> &workingList, VertexType workingVertex );
int findUnUsedVertex( const SimpleList<VertexType> &workingList, VertexType workingVertex );

// Main function implementation  //////////////////////////////////////////////

int  main()
   {
    SimpleList<VertexType> vertexList( MAX_VERTICES );
    VertexType workingVertex;
    PathType workingPath;
    char vertex_1, vertex_2;
    int weight;

    cout << endl << "Loading Data" << endl << endl;

    while( getALine( cin, vertex_1, weight, vertex_2 ) )
       {
        // set first vertex to second vertex information
        workingVertex.vertexLetter = vertex_1;
        
        workingPath.vertexLetter = vertex_2;

        workingPath.pathWeight = weight;

        vertexList.findData( workingVertex, REMOVE_ITEM );

        workingVertex.addPath( workingPath );

        vertexList.addItem( workingVertex );

        // set second vertex to first vertex information
        workingVertex.clear();

        workingVertex.vertexLetter = vertex_2;

        workingPath.vertexLetter = vertex_1;

        workingPath.pathWeight = weight;

        vertexList.findData( workingVertex, REMOVE_ITEM );

        workingVertex.addPath( workingPath );

        vertexList.addItem( workingVertex );

        workingVertex.clear();
       }

    dumpList( vertexList );

    DepthFirstTraversal( vertexList );

    BreadthFirstTraversal( vertexList );

    return 0;
   }

// Free function implementation  //////////////////////////////////////////////

void DepthFirstTraversal( const SimpleList<VertexType> &list )
   {
    int index = 0;
    SimpleStack<VertexType> workingStack;
    SimpleList<VertexType> workingList( list );  
    VertexType poppedData; 

    cout << "Implementing Depth First Traversal\n"; 
    cout << "Visiting vertices:";

    workingList[index].usedState = true; 

    workingStack.push( workingList[index] );

    cout << " " << workingList[index].vertexLetter; 
    
    while( !workingStack.isEmpty( ) ) 
    {
        if( allAdjacentVertexVisited( workingList, workingList[index] ) )
        {
            workingStack.pop( poppedData ); 
        }
        else 
        {
            index = findUnUsedVertex( workingList, workingList[index] );

            workingList[index].usedState = true;

            workingStack.push( workingList[index] );  
          
            cout  << "," << " " << workingList[index].vertexLetter;
        }   
    }

   }

void BreadthFirstTraversal( const SimpleList<VertexType> &list )
   {
    // to be implemented
   }

bool allAdjacentVertexVisited( const SimpleList<VertexType> &workingList, VertexType workingVertex )
   {
    int index = 0;
    int indexTwo = 0; 
    char temp; 
    //cout << workingVertex.numPaths << endl;
    
    while( index < workingVertex.numPaths )
    {
        
        temp = workingVertex.paths[index].vertexLetter;
        
        indexTwo = 0;
        cout << index << endl;
        while( workingList[indexTwo].vertexLetter != temp  )
        {
            //cout << "bang" << " ";
            indexTwo++; 
        }
        if( workingList[indexTwo].usedState == false )
        {
            return false;
        }
        
        index++; 
        //cout << index << endl; 
    }
    
    return true;

   }
int findUnUsedVertex( const SimpleList<VertexType> &workingList, VertexType workingVertex )
   {
    int index = 0, indexTwo = 0; 
    char temp;
    
    while( index < workingVertex.numPaths )
    {
        temp = workingVertex.paths[index].vertexLetter;
        
        indexTwo = 0; 
        
        while( workingList[indexTwo].vertexLetter != temp  )
        {
            indexTwo++; 
        }
        if( workingList[indexTwo].usedState == false )
        {
            return indexTwo;
        }
        index++; 
    }
    
    return -1;

   }
void dumpList( const SimpleList<VertexType> &list )
   {
    SimpleList<VertexType> testList( list );
    VertexType workingVertex;
    PathType workingPath;
    int vertIndex = 0, pathIndex;

    cout << "Starting Vertex List Dump: " << endl;

    while( vertIndex < testList.getSize() )
       {
        workingVertex = testList[ vertIndex ];

        cout << "Vertex: " << workingVertex.vertexLetter << endl;

        for( pathIndex = 0; pathIndex < workingVertex.numPaths; pathIndex++ )
           {
            workingPath = workingVertex.paths[ pathIndex ];

            cout << TAB << "Path: " << workingPath.pathWeight
                 << " to: " << workingPath.vertexLetter << endl;
           }

        cout << endl;

        vertIndex++;
       }
   }

bool getALine( istream &consoleIn, char &vert_1, int &wt, char &vert_2 )
   {
    char inChar;

    // get first vertex
    consoleIn >> vert_1;

    if( vert_1 == DATA_END_CHAR )
       {
        return false;
       }
   
    // get divider comma
    consoleIn >> inChar;

    // get path weight
    consoleIn >> wt;

    // get divider comma
    consoleIn >> inChar;

    // get second vertex
    consoleIn >> vert_2;

    return true;
   }

bool getLine( istream &consoleIn, char *str, int length, char stopChar )
   {
    const char LOWEST_PRINTABLE_CHAR = 32;  // space
    const char HIGHEST_PRINTABLE_CHAR = 126;  // tilde 
    int index = 0;
    int inVal;
    bool istreamState = consoleIn.good();

    inVal = consoleIn.get();

    while( char( inVal ) != stopChar && index < length - 1  )
       {
        if( inVal >= LOWEST_PRINTABLE_CHAR 
                                    && inVal <= HIGHEST_PRINTABLE_CHAR )
           {
            str[ index ] = char( inVal );

            index++;

            str[ index ] = NULL_CHAR;
           }

        inVal = consoleIn.get();
       }

    return istreamState;
   }





